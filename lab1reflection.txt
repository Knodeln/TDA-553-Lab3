1. Explain how you chose the inheritance hierarchy in Task 1, making reference to the Open-Closed Principle.
Both Saab95 and Volvo240 are cars and should share some aspects of each other. We then implemented the Car
which contains the attributes and methods all Cars should share. The superclass Car is an abstract to make sure
no car without a model is created. This makes it so that if a change is needed to all cars, code only has to be changed 
once, as well as making the code extendable. We are able to create new car models without changing the car
superclass and specifying behaviour(overriding, adding new attributes) in those models are possible.



2. Explain how you implemented each of the sanity checks in Task 4.
We implemented the given interval [0,1] to gas and brake by implementing an if-statement before the methods code blocks. 
If the argument is within the interval gas() or brake() will continue with their tasks. If the if-statement turns out
false, an IllegalArgumentException gets thrown instead.
As the interval does not include negative numbers, gas() cannot result in the speed decreasing as 
( + this.speedFactor() * amount;) will always be >= 0.
brake() cannot result in the speed increasing as ( - this.speedFactor() * amount;) will always be <= 0.
To make the currentspeed stay within the interval [0, enginepower], we implemented an if statement in incrementspeed()
which runs the rest of the code block if the cars currentspeed is strictly less than its enginepower.
In decrementspeed() we implemented an if statement which runs the rest of the code block if the cars
currentspeed is strictly larger than 0. If the if statements are false, the speed does not increase/decrease, which
ensures the cars speed stays within the desired interval.


We implemented the jUnit tester to make sure that everything worked as intended, by first having a @Before where we 
reseted each test_car before testing their methods. We then tried to think of every scenario where the methods would not work
as intended or give unexpected outputs and implemented a function to see if the output would be in the expected range or not. 
Whenever we encountered a bug where we received the wrong output, we then inspected each involved classmethods and attributes 
involved. 